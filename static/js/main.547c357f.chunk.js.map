{"version":3,"sources":["api/api.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/emailValidator.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","Loader","className","PostsList","userId","onSelect","selectedPostId","load","isLoadPost","useState","posts","setPosts","useEffect","data","getUserPosts","isOpened","postId","length","map","post","title","type","onClick","id","removeComment","commentId","method","isEmailValid","NewCommentForm","setComment","name","setName","email","setEmail","body","setBody","errors","setErrors","onSubmit","event","preventDefault","state","test","headers","JSON","stringify","addComment","comment","placeholder","value","onChange","target","PostDetails","setPost","comments","setComments","hasCommentsHidden","setHasCommentsHidden","getPostDetails","postFromServer","getPostComments","commentsFromServer","has","item","filter","deleteComment","App","selectedUserId","setSelectedUserId","setSelectedPostId","setIsLoadPost","users","setUsers","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.547c357f.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(BASE_URL + url, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  userId: number,\n  onSelect: (postId: number) => void,\n  selectedPostId: number,\n  isLoadPost: boolean,\n}\n\nexport const PostsList: FC<Props> = (\n  {\n    userId,\n    onSelect,\n    selectedPostId,\n    isLoadPost: load,\n  },\n) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    if (userId === 0) {\n      getPosts().then(data => {\n        setPosts(data);\n      });\n    } else {\n      getUserPosts(userId).then(\n        data => {\n          setPosts(data);\n        },\n      );\n    }\n  }, [userId]);\n\n  const isOpened = (postId: number) => selectedPostId === postId;\n\n  const postDetailsToggle = (postId: number) => {\n    if (isOpened(postId)) {\n      onSelect(0);\n    } else {\n      onSelect(postId);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n        {posts.length ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => postDetailsToggle(post.id)}\n                >\n                  {isOpened(post.id) ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <>\n            {load ? <Loader /> : <h3>User has no posts</h3>}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { request } from './api';\n\nexport const getPosts = (): Promise<Post[]> => request('/posts');\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: number): Promise<Post> => request(`/posts/${postId}`);\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => request(`/comments?postId=${postId}`);\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => request('/comments', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n\nexport const removeComment = (commentId: number) => request(`/comments/${commentId}`, {\n  method: 'DELETE',\n});\n","/* eslint-disable max-len */\n/* eslint-disable no-useless-escape */\nexport const isEmailValid\n= /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n","import { FC, FormEvent, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport { isEmailValid } from './emailValidator';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  setComment: (comment: Comment) => void;\n}\n\ninterface Errors {\n  name: string,\n  email: string,\n  body: string\n}\n\nexport const NewCommentForm: FC<Props> = ({ postId, setComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const [errors, setErrors] = useState((): Errors => ({\n    name: '',\n    email: '',\n    body: '',\n  }));\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name) {\n      setErrors(state => ({\n        ...state,\n        name: 'Please, write your name',\n      }));\n    }\n\n    if (!isEmailValid.test(email)) {\n      setErrors(state => ({\n        ...state,\n        email: 'Please, write correct email',\n      }));\n    }\n\n    if (!body) {\n      setErrors(state => ({\n        ...state,\n        body: 'Please, write something',\n      }));\n    }\n\n    if (!name || !isEmailValid.test(email) || !body) {\n      return;\n    }\n\n    addComment(\n      postId,\n      name,\n      email,\n      body,\n    ).then(comment => {\n      setComment(comment);\n      resetForm();\n    });\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n            setErrors(state => ({\n              ...state,\n              name: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.name}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n            setErrors(state => ({\n              ...state,\n              email: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.email}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={(event) => {\n            setBody(event.target.value);\n            setErrors(state => ({\n              ...state,\n              body: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.body}</p>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\ninterface Props {\n  postId: number\n}\n\nexport const PostDetails: FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasCommentsHidden, setHasCommentsHidden] = useState(false);\n\n  const setComment = (comment: Comment) => setComments([...comments, comment]);\n\n  const deleteComment = (commentId = 0) => {\n    removeComment(commentId).then((item => {\n      if (item) {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      }\n    }));\n  };\n\n  useEffect(() => {\n    if (postId !== 0) {\n      getPostDetails(postId)\n        .then(postFromServer => setPost(postFromServer));\n      getPostComments(postId)\n        .then(commentsFromServer => setComments(commentsFromServer));\n    } else {\n      setPost(null);\n      setComments([]);\n    }\n  }, [postId]);\n\n  return (\n    <>\n      {post ? (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n          {post && (\n            <>\n              <section className=\"PostDetails__post\">\n                <p>{post.body}</p>\n              </section>\n\n              {comments.length > 0 && (\n                <section className=\"PostDetails__comments\">\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setHasCommentsHidden(has => !has)}\n                  >\n                    {`${hasCommentsHidden ? 'show' : 'hide'} ${comments.length} comments`}\n                  </button>\n\n                  {!hasCommentsHidden && (\n                    <ul className=\"PostDetails__list\">\n                      {comments.map(comment => (\n                        <li className=\"PostDetails__list-item\" key={comment.id}>\n                          <button\n                            type=\"button\"\n                            className=\"PostDetails__remove-button button\"\n                            onClick={() => deleteComment(comment.id)}\n                          >\n                            X\n                          </button>\n                          <p>{comment.body}</p>\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n\n                </section>\n              )}\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    postId={post.id}\n                    setComment={setComment}\n                  />\n                </div>\n              </section>\n            </>\n          )}\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n","import {\n  ChangeEvent, FC, useEffect, useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isLoadPost, setIsLoadPost] = useState(true);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .then(() => {\n        setIsLoadPost(false);\n      });\n  }, []);\n\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const selectPost = (id: number) => setSelectedPostId(id);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUserId}\n            onSelect={selectPost}\n            selectedPostId={selectedPostId}\n            isLoadPost={isLoadPost}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = (): Promise<User[]> => request('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}