{"version":3,"sources":["api/api.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/posts.ts","api/comments.ts","components/NewCommentForm/emailValidator.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","Loader","className","PostsList","userId","onSelect","selectedPostId","load","isLoadPost","useState","posts","setPosts","useEffect","data","getUserPosts","isOpened","postId","length","map","post","title","type","onClick","id","removeComment","commentId","method","isEmailValid","NewCommentForm","setComment","name","email","body","dataIn","setDataIn","errors","setErrors","onSubmit","event","preventDefault","state","test","headers","JSON","stringify","addComment","comment","placeholder","value","onChange","target","PostDetails","setPost","comments","setComments","hasCommentsHidden","setHasCommentsHidden","getPostDetails","postFromServer","getPostComments","commentsFromServer","has","item","filter","deleteComment","App","selectedUserId","setSelectedUserId","setSelectedPostId","setIsLoadPost","users","setUsers","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65dc8e5e.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(BASE_URL + url, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  userId: number,\n  onSelect: (postId: number) => void,\n  selectedPostId: number,\n  isLoadPost: boolean,\n}\n\nexport const PostsList: FC<Props> = (\n  {\n    userId,\n    onSelect,\n    selectedPostId,\n    isLoadPost: load,\n  },\n) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    if (userId === 0) {\n      getPosts().then(data => {\n        setPosts(data);\n      });\n    } else {\n      getUserPosts(userId).then(\n        data => {\n          setPosts(data);\n        },\n      );\n    }\n  }, [userId]);\n\n  const isOpened = (postId: number) => selectedPostId === postId;\n\n  const postDetailsToggle = (postId: number) => {\n    if (isOpened(postId)) {\n      onSelect(0);\n    } else {\n      onSelect(postId);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n        {posts.length ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => postDetailsToggle(post.id)}\n                >\n                  {isOpened(post.id) ? 'Close' : 'Open'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <>\n            {load ? <Loader /> : <h3>User has no posts</h3>}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { request } from './api';\n\nexport const getPosts = (): Promise<Post[]> => request('/posts');\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = (postId: number): Promise<Post> => request(`/posts/${postId}`);\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => request(\n  `/comments?postId=${postId}`,\n);\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => request('/comments', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n\nexport const removeComment = (commentId: number) => request(\n  `/comments/${commentId}`,\n  {\n    method: 'DELETE',\n  },\n);\n","/* eslint-disable max-len */\n/* eslint-disable no-useless-escape */\nexport const isEmailValid\n= /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n","import { FC, FormEvent, useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport { isEmailValid } from './emailValidator';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  setComment: (comment: Comment) => void;\n}\n\ninterface Errors {\n  name: string,\n  email: string,\n  body: string\n}\n\ninterface InputData {\n  name: string,\n  email: string,\n  body: string\n}\n\nexport const NewCommentForm: FC<Props> = ({ postId, setComment }) => {\n  const [dataIn, setDataIn] = useState((): InputData => ({\n    name: '',\n    email: '',\n    body: '',\n  }));\n\n  const [errors, setErrors] = useState((): Errors => ({\n    name: '',\n    email: '',\n    body: '',\n  }));\n\n  const resetForm = () => {\n    setDataIn(state => ({\n      ...state,\n      name: '',\n    }));\n    setDataIn(state => ({\n      ...state,\n      email: '',\n    }));\n    setDataIn(state => ({\n      ...state,\n      body: '',\n    }));\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!dataIn.name) {\n      setErrors(state => ({\n        ...state,\n        name: 'Please, write your name',\n      }));\n    }\n\n    if (!isEmailValid.test(dataIn.email)) {\n      setErrors(state => ({\n        ...state,\n        email: 'Please, write correct email',\n      }));\n    }\n\n    if (!dataIn.body) {\n      setErrors(state => ({\n        ...state,\n        body: 'Please, write something',\n      }));\n    }\n\n    if (!dataIn.name || !isEmailValid.test(dataIn.email) || !dataIn.body) {\n      return;\n    }\n\n    addComment(\n      postId,\n      dataIn.name,\n      dataIn.email,\n      dataIn.body,\n    ).then(comment => {\n      setComment(comment);\n      resetForm();\n    });\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={dataIn.name}\n          onChange={(event) => {\n            setDataIn(state => ({\n              ...state,\n              name: event.target.value,\n            }));\n            setErrors(state => ({\n              ...state,\n              name: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.name}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={dataIn.email}\n          onChange={(event) => {\n            setDataIn(state => ({\n              ...state,\n              email: event.target.value,\n            }));\n            setErrors(state => ({\n              ...state,\n              email: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.email}</p>\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={dataIn.body}\n          onChange={(event) => {\n            setDataIn(state => ({\n              ...state,\n              body: event.target.value,\n            }));\n            setErrors(state => ({\n              ...state,\n              body: '',\n            }));\n          }}\n        />\n        <p className=\"NewCommentForm__error\">{errors.body}</p>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport './PostDetails.scss';\n\ninterface Props {\n  postId: number\n}\n\nexport const PostDetails: FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasCommentsHidden, setHasCommentsHidden] = useState(false);\n\n  const setComment = (comment: Comment) => setComments([...comments, comment]);\n\n  const deleteComment = (commentId = 0) => {\n    removeComment(commentId).then((item => {\n      if (item) {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      }\n    }));\n  };\n\n  useEffect(() => {\n    if (postId !== 0) {\n      getPostDetails(postId)\n        .then(postFromServer => setPost(postFromServer));\n      getPostComments(postId)\n        .then(commentsFromServer => setComments(commentsFromServer));\n    } else {\n      setPost(null);\n      setComments([]);\n    }\n  }, [postId]);\n\n  return (\n    <>\n      {post ? (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n          {post && (\n            <>\n              <section className=\"PostDetails__post\">\n                <p>{post.body}</p>\n              </section>\n\n              {comments.length > 0 && (\n                <section className=\"PostDetails__comments\">\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setHasCommentsHidden(has => !has)}\n                  >\n                    {`${hasCommentsHidden ? 'show' : 'hide'} ${comments.length} comments`}\n                  </button>\n\n                  {!hasCommentsHidden && (\n                    <ul className=\"PostDetails__list\">\n                      {comments.map(comment => (\n                        <li className=\"PostDetails__list-item\" key={comment.id}>\n                          <button\n                            type=\"button\"\n                            className=\"PostDetails__remove-button button\"\n                            onClick={() => deleteComment(comment.id)}\n                          >\n                            X\n                          </button>\n                          <p>{comment.body}</p>\n                        </li>\n                      ))}\n                    </ul>\n                  )}\n\n                </section>\n              )}\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    postId={post.id}\n                    setComment={setComment}\n                  />\n                </div>\n              </section>\n            </>\n          )}\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </>\n  );\n};\n","import {\n  ChangeEvent, FC, useEffect, useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\nconst App: FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isLoadPost, setIsLoadPost] = useState(true);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .then(() => {\n        setIsLoadPost(false);\n      });\n  }, []);\n\n  const handleChange = (event: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  const selectPost = (id: number) => setSelectedPostId(id);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUserId}\n            onSelect={selectPost}\n            selectedPostId={selectedPostId}\n            isLoadPost={isLoadPost}\n          />\n        </div>\n\n        {selectedPostId !== 0 && (\n          <div className=\"App__content\">\n            <PostDetails\n              postId={selectedPostId}\n            />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = (): Promise<User[]> => request('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}